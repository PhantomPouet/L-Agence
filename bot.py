import discord
from discord.ext import commands, tasks
from discord import app_commands
import os
import aiohttp
import json
import firebase_admin
from firebase_admin import credentials, firestore
import sys
import base64

print("[DEBUG] D√©marrage du script bot.py")

# --- Variables d'environnement ---
# Chaque variable est v√©rifi√©e pour s'assurer qu'elle existe et est au bon format.
# Si une erreur est d√©tect√©e, un message d'erreur critique est imprim√© et le script s'arr√™te.

# DISCORD_TOKEN
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("[CRITICAL ERROR] DISCORD_TOKEN manquant. Le bot ne peut pas se connecter.")
    sys.exit(1)

# DISCORD_GUILD_ID
try:
    GUILD_ID = int(os.getenv("DISCORD_GUILD_ID"))
except (TypeError, ValueError): # G√®re les cas o√π la variable est manquante ou non num√©rique
    print("[CRITICAL ERROR] DISCORD_GUILD_ID invalide ou manquant. Assurez-vous qu'il est d√©fini et est un nombre entier.")
    sys.exit(1)

# TWITCH_CLIENT_ID et TWITCH_SECRET
TWITCH_CLIENT_ID = os.getenv("TWITCH_CLIENT_ID")
TWITCH_SECRET = os.getenv("TWITCH_SECRET")
if not TWITCH_CLIENT_ID or not TWITCH_SECRET:
    print("[CRITICAL ERROR] Cl√©s Twitch (TWITCH_CLIENT_ID ou TWITCH_SECRET) manquantes. Le bot ne pourra pas interroger l'API Twitch.")
    sys.exit(1)

# ROLE_STREAM_ID et ROLE_GAME_ID
try:
    ROLE_STREAM_ID = int(os.getenv("ROLE_STREAM_ID"))
    ROLE_GAME_ID = int(os.getenv("ROLE_GAME_ID"))
except (TypeError, ValueError): # G√®re les cas o√π les variables sont manquantes ou non num√©riques
    print("[CRITICAL ERROR] ROLE_STREAM_ID ou ROLE_GAME_ID invalide ou manquant. Assurez-vous qu'ils sont d√©finis et sont des nombres entiers.")
    sys.exit(1)

# FIREBASE_KEY_JSON_BASE64 (Cl√© de service Firebase encod√©e en Base64)
firebase_key_base64 = os.getenv("FIREBASE_KEY_JSON_BASE64")
if not firebase_key_base64:
    print("[CRITICAL ERROR] Cl√© Firebase (FIREBASE_KEY_JSON_BASE64) manquante. Impossible d'initialiser Firebase.")
    sys.exit(1)

try:
    # D√©coder la cha√Æne Base64 en bytes, puis en string UTF-8, puis parser le JSON
    firebase_key = json.loads(base64.b64decode(firebase_key_base64).decode("utf-8"))
    print("[DEBUG] Cl√© Firebase charg√©e pour le projet :", firebase_key.get("project_id"))
except (base64.binascii.Error, UnicodeDecodeError, json.JSONDecodeError) as e:
    print(f"[CRITICAL ERROR] Erreur de d√©codage (Base64 ou JSON) pour FIREBASE_KEY_JSON_BASE64: {e}")
    # Affiche le d√©but de la cha√Æne pour aider au d√©bogage, √©vite d'afficher toute la cl√©
    print(f"La valeur de FIREBASE_KEY_JSON_BASE64 (d√©but): {firebase_key_base64[:100]}...")
    sys.exit(1)
except Exception as e:
    print(f"[CRITICAL ERROR] Erreur inattendue lors du chargement de la cl√© Firebase: {e}")
    sys.exit(1)

# --- Initialisation Firebase ---
try:
    cred = credentials.Certificate(firebase_key)
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    print("[DEBUG] Firebase initialis√© avec succ√®s.")
except Exception as e:
    print(f"[CRITICAL ERROR] Erreur lors de l'initialisation de l'application Firebase: {e}")
    sys.exit(1)

# --- Configuration Discord Bot ---
intents = discord.Intents.default()
intents.presences = True # N√©cessaire pour d√©tecter les activit√©s (jeux, streams)
intents.members = True   # N√©cessaire pour acc√©der aux membres et leurs r√¥les/pseudos
intents.guilds = True    # N√©cessaire pour obtenir l'objet guilde et synchroniser les commandes
intents.message_content = False # Non n√©cessaire pour les commandes slash, bonne pratique de d√©sactiver si non utilis√©

bot = commands.Bot(command_prefix="!", intents=intents)

# Jeu cible pour la d√©tection
TARGET_GAME = "Star Citizen"
# R√¥les Discord √† exclure de la gestion automatique (par exemple, les administrateurs)
EXCLUDED_ROLE_IDS = [1363632614556041417] # Remplacez par les IDs de vos r√¥les exclus

# --- Fonctions Firebase pour la persistance des donn√©es ---
def is_excluded(member):
    """V√©rifie si un membre poss√®de un r√¥le exclu."""
    return any(role.id in EXCLUDED_ROLE_IDS for role in member.roles)

def save_link(user_id, twitch):
    """Sauvegarde le pseudo Twitch d'un utilisateur dans Firestore."""
    db.collection("twitch_links").document(str(user_id)).set({"twitch": twitch})

def delete_link(user_id):
    """Supprime le pseudo Twitch d'un utilisateur de Firestore."""
    db.collection("twitch_links").document(str(user_id)).delete()

def get_link(user_id):
    """R√©cup√®re le pseudo Twitch li√© √† un utilisateur depuis Firestore."""
    doc = db.collection("twitch_links").document(str(user_id)).get()
    return doc.to_dict()["twitch"] if doc.exists else None

def save_nick(user_id, nick):
    """Sauvegarde le pseudo original d'un utilisateur avant modification."""
    db.collection("nicknames").document(str(user_id)).set({"nick": nick})

def delete_nick(user_id):
    """Supprime le pseudo original enregistr√© d'un utilisateur."""
    db.collection("nicknames").document(str(user_id)).delete()

def get_nick(user_id):
    """R√©cup√®re le pseudo original d'un utilisateur depuis Firestore."""
    doc = db.collection("nicknames").document(str(user_id)).get()
    return doc.to_dict()["nick"] if doc.exists else None

# --- Fonctions d'interaction avec l'API Twitch ---
async def get_twitch_token():
    """Obtient un token d'acc√®s OAuth de Twitch."""
    if not TWITCH_CLIENT_ID or not TWITCH_SECRET:
        print("[ERROR] TWITCH_CLIENT_ID ou TWITCH_SECRET est vide. Impossible d'obtenir le token Twitch.")
        raise ValueError("Cl√©s Twitch manquantes ou vides.")

    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": TWITCH_CLIENT_ID,
        "client_secret": TWITCH_SECRET,
        "grant_type": "client_credentials"
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(url, params=params) as resp:
            data = await resp.json()
            if resp.status == 200 and "access_token" in data:
                return data["access_token"]
            else:
                print(f"[ERROR] Erreur lors de l'obtention du token Twitch: Statut={resp.status}, R√©ponse={data}")
                raise ValueError(f"Impossible d'obtenir le token Twitch. Statut: {resp.status}")

async def is_streaming_on_twitch(username):
    """V√©rifie si un utilisateur Twitch stream et sur quel jeu."""
    try:
        token = await get_twitch_token()
        if not token: # V√©rifie si le token est vide apr√®s get_twitch_token
            return "‚ùå Erreur (token vide)"

        headers = {
            "Client-ID": TWITCH_CLIENT_ID,
            "Authorization": f"Bearer {token}"
        }
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.twitch.tv/helix/streams?user_login={username}", headers=headers) as resp:
                data = await resp.json()
                print(f"[DEBUG] Twitch API response for {username}: {data}")
                if resp.status != 200:
                    print(f"[ERROR] Erreur HTTP lors de la requ√™te Twitch: Statut={resp.status} - R√©ponse={data}")
                    return "‚ùå Erreur API"
                
                # V√©rifie si 'data' est une liste non vide et contient des informations de stream
                if data.get("data") and isinstance(data["data"], list) and data["data"]:
                    stream = data["data"][0]
                    if stream.get("game_name", "").lower() == TARGET_GAME.lower():
                        return "üî¥ En live" # Stream sur le jeu cible
                    return "üü£ Autre live" # Stream sur un autre jeu
                return "‚ö´ Hors ligne" # Pas de donn√©es de stream, donc hors ligne
    except Exception as e:
        print(f"[ERROR] √âchec Twitch API pour {username}: {e}")
        return "‚ùå Erreur"

# --- √âv√©nements Discord ---
@bot.event
async def on_ready():
    """Se d√©clenche lorsque le bot est connect√© √† Discord."""
    print("[DEBUG] √âv√©nement on_ready d√©clench√©")
    print(f"Connect√© en tant que {bot.user}")
    await bot.change_presence(activity=discord.CustomActivity(name="/link")) # D√©finit le statut du bot
    try:
        # Synchronise les commandes slash avec la guilde sp√©cifi√©e
        synced = await bot.tree.sync(guild=discord.Object(id=GUILD_ID))
        print(f"[DEBUG] Commandes synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"[ERROR] Erreur de synchronisation des commandes : {e}")
    check_streams.start() # D√©marre la t√¢che de v√©rification des streams

# --- Commandes Slash ---
@bot.tree.command(name="link", description="Lier ton pseudo Twitch", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(twitch="Ton pseudo Twitch")
async def link(interaction: discord.Interaction, twitch: str):
    """Commande pour lier un pseudo Twitch √† l'utilisateur Discord."""
    # Acquitte l'interaction imm√©diatement pour √©viter les timeouts Discord
    await interaction.response.defer(ephemeral=True) 
    save_link(interaction.user.id, twitch) # Sauvegarde le lien Twitch dans Firestore
    live = await is_streaming_on_twitch(twitch) # V√©rifie le statut Twitch
    # Envoie la r√©ponse r√©elle via followup.send apr√®s le defer
    await interaction.followup.send(f"Twitch li√© : `{twitch}`\nStatut : {live}", ephemeral=True)

@bot.tree.command(name="unlink", description="Supprimer le lien Twitch", guild=discord.Object(id=GUILD_ID))
async def unlink(interaction: discord.Interaction):
    """Commande pour supprimer le lien Twitch de l'utilisateur Discord."""
    await interaction.response.defer(ephemeral=True)
    delete_link(interaction.user.id) # Supprime le lien Twitch de Firestore
    await interaction.followup.send("Lien supprim√©.", ephemeral=True)

@bot.tree.command(name="statut", description="Afficher le statut Twitch", guild=discord.Object(id=GUILD_ID))
async def statut(interaction: discord.Interaction):
    """Commande pour afficher le statut Twitch de l'utilisateur li√©."""
    await interaction.response.defer(ephemeral=True) # Acquitte l'interaction
    twitch = get_link(interaction.user.id) # R√©cup√®re le lien Twitch
    if not twitch:
        await interaction.followup.send("Aucun pseudo Twitch li√©.", ephemeral=True)
    else:
        live = await is_streaming_on_twitch(twitch) # V√©rifie le statut Twitch
        await interaction.followup.send(f"Twitch : `{twitch}`\nStatut : {live}", ephemeral=True)

# --- T√¢che p√©riodique pour v√©rifier les streams et les jeux ---
@tasks.loop(minutes=2) # La t√¢che s'ex√©cute toutes les 2 minutes
async def check_streams():
    print("[DEBUG] check_streams lanc√©")
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print(f"[ERROR] Guilde {GUILD_ID} introuvable. V√©rifiez GUILD_ID et les intents du bot.")
        return # Quitte la t√¢che si la guilde n'est pas trouv√©e

    stream_role = guild.get_role(ROLE_STREAM_ID)
    game_role = guild.get_role(ROLE_GAME_ID)

    # Avertissements si les r√¥les ne sont pas trouv√©s (mais ne bloque pas la t√¢che)
    if not stream_role:
        print(f"[WARNING] R√¥le Stream (ID: {ROLE_STREAM_ID}) introuvable. La gestion du r√¥le de stream sera ignor√©e.")
    if not game_role:
        print(f"[WARNING] R√¥le Jeu (ID: {ROLE_GAME_ID}) introuvable. La gestion du r√¥le de jeu sera ignor√©e.")

    try:
        # It√®re sur les documents Firestore de mani√®re synchrone (comme attendu par .stream())
        docs = db.collection("twitch_links").stream()
        for doc in docs:
            user_id = int(doc.id)
            twitch_name = doc.to_dict().get("twitch")
            member = guild.get_member(user_id) # R√©cup√®re l'objet membre Discord

            if not member:
                print(f"[DEBUG] Membre Discord {user_id} introuvable pour le lien Twitch {twitch_name}. Lien ignor√©.")
                continue # Passe au prochain document si le membre n'est plus sur le serveur
            if is_excluded(member):
                print(f"[DEBUG] Membre {member.display_name} exclu. Ignor√©.")
                continue # Passe au prochain document si le membre est exclu

            # --- Statut Twitch ---
            status = await is_streaming_on_twitch(twitch_name)
            print(f"[DEBUG] {member.display_name} -> Statut Twitch: {status}")
            
            # Gestion du r√¥le de stream (si le r√¥le existe)
            if stream_role: 
                if status == "üî¥ En live":
                    if stream_role not in member.roles:
                        try:
                            await member.add_roles(stream_role)
                            print(f"[INFO] R√¥le stream ajout√© √† {member.display_name}")
                        except discord.Forbidden:
                            print(f"[ERROR] Permissions insuffisantes pour ajouter le r√¥le Stream √† {member.display_name}")
                        except Exception as e:
                            print(f"[ERROR] Erreur lors de l'ajout du r√¥le Stream √† {member.display_name}: {e}")
                else: # Si le statut n'est pas "üî¥ En live"
                    if stream_role in member.roles:
                        try:
                            await member.remove_roles(stream_role)
                            print(f"[INFO] R√¥le stream retir√© de {member.display_name}")
                        except discord.Forbidden:
                            print(f"[ERROR] Permissions insuffisantes pour retirer le r√¥le Stream de {member.display_name}")
                        except Exception as e:
                            print(f"[ERROR] Erreur lors de la suppression du r√¥le Stream de {member.display_name}: {e}")
            else:
                print(f"[DEBUG] R√¥le Stream non d√©fini, skipping gestion du r√¥le de stream pour {member.display_name}.")


            # Gestion du pseudo (si l'utilisateur est en live sur le jeu cible)
            # R√©cup√®re le pseudo de base (original ou actuel si non enregistr√©)
            base_name = get_nick(member.id) or member.display_name 
            if status == "üî¥ En live" and not base_name.startswith("üî¥"):
                save_nick(member.id, base_name) # Sauvegarde le pseudo original avant de le modifier
                try:
                    await member.edit(nick=f"üî¥ {base_name}")
                    print(f"[INFO] Pseudo de {member.display_name} mis √† jour en üî¥ {base_name}")
                except discord.Forbidden:
                    print(f"[ERROR] Permissions insuffisantes pour modifier le pseudo de {member.display_name}")
                except Exception as e:
                    print(f"[ERROR] Erreur lors de la modification du pseudo de {member.display_name}: {e}")
            elif status != "üî¥ En live" and base_name.startswith("üî¥"): # Si n'est plus en live sur le jeu cible et pseudo modifi√©
                nick_original = get_nick(member.id) # Tente de r√©cup√©rer le pseudo original enregistr√©
                if nick_original:
                    try:
                        await member.edit(nick=nick_original)
                        print(f"[INFO] Pseudo de {member.display_name} restaur√© √† {nick_original}")
                    except discord.Forbidden:
                        print(f"[ERROR] Permissions insuffisantes pour restaurer le pseudo de {member.display_name}")
                    except Exception as e:
                        print(f"[ERROR] Erreur lors de la restauration du pseudo de {member.display_name}: {e}")
                    delete_nick(member.id) # Supprime le pseudo enregistr√© apr√®s restauration
                else:
                    # Cas o√π le pseudo original n'a pas √©t√© enregistr√© (ex: bot a crash√©, ou pseudo modifi√© manuellement)
                    # On tente de supprimer le üî¥ si le pseudo actuel commence par üî¥
                    if member.display_name.startswith("üî¥"):
                        try:
                            # Supprime le "üî¥ " et les espaces √©ventuels
                            await member.edit(nick=member.display_name[2:].strip()) 
                            print(f"[INFO] Pseudo de {member.display_name} nettoy√© (üî¥ retir√©).")
                        except discord.Forbidden:
                            print(f"[ERROR] Permissions insuffisantes pour nettoyer le pseudo de {member.display_name}")
                        except Exception as e:
                            print(f"[ERROR] Erreur lors du nettoyage du pseudo de {member.display_name}: {e}")


            # --- D√©tection de jeu Star Citizen (activit√© Discord) ---
            is_playing_game = False
            if member.activities: # S'assure qu'il y a des activit√©s √† v√©rifier
                for act in member.activities:
                    # MODIFI√â : V√©rifie si l'activit√© est de type 'Playing' (discord.ActivityType.playing)
                    # et si le nom du jeu correspond √† TARGET_GAME (insensible √† la casse)
                    if isinstance(act, discord.Activity) and act.type == discord.ActivityType.playing and act.name and act.name.lower() == TARGET_GAME.lower():
                        is_playing_game = True
                        break # Sort de la boucle d√®s que le jeu cible est trouv√©

            print(f"[DEBUG] {member.display_name} -> Joue √† {TARGET_GAME}: {is_playing_game}")

            # Gestion du r√¥le de jeu (si le r√¥le existe)
            if game_role:
                if is_playing_game:
                    if game_role not in member.roles:
                        try:
                            await member.add_roles(game_role)
                            print(f"[INFO] R√¥le jeu ajout√© √† {member.display_name}")
                        except discord.Forbidden:
                            print(f"[ERROR] Permissions insuffisantes pour ajouter le r√¥le Jeu √† {member.display_name}")
                        except Exception as e:
                            print(f"[ERROR] Erreur lors de l'ajout du r√¥le Jeu √† {member.display_name}: {e}")
                else: # Si ne joue plus au jeu cible
                    if game_role in member.roles:
                        try:
                            await member.remove_roles(game_role)
                            print(f"[INFO] R√¥le jeu retir√© de {member.display_name}")
                        except discord.Forbidden:
                            print(f"[ERROR] Permissions insuffisantes pour retirer le r√¥le Jeu de {member.display_name}")
                        except Exception as e:
                            print(f"[ERROR] Erreur lors de la suppression du r√¥le Jeu de {member.display_name}: {e}")
            else:
                print(f"[DEBUG] R√¥le Jeu non d√©fini, skipping gestion du r√¥le de jeu pour {member.display_name}.")

    except Exception as e:
        print(f"[ERROR] Erreur g√©n√©rale dans check_streams: {e}")
        # Ne pas sys.exit(1) ici pour ne pas faire planter le bot entier,
        # la t√¢che se relancera au prochain intervalle.

# --- Lancement du bot ---
print("[DEBUG] Bot en cours de lancement...")
bot.run(TOKEN)
